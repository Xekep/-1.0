// kiiko
let data = {data};

const selectors = {
  success: '#mainDialog > fgis-modal > div > div.fgis-modal__content > div.fgis-modal__body > p',
  btnPlus:
    "body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.header-block > fgis-table-toolbar > section > div > div.left-side > div > fgis-toolbar > div > div:nth-child(1) > fgis-toolbar-button > button",
  btnCheck:
    "body > fgis-root > div > fgis-roei > fgis-verification-measuring-instruments-card-edit > fgis-verification-measuring-instruments-card-edit-toolbar > div > fgis-toolbar > div > div:nth-child(1) > fgis-toolbar-button > button",
  arshNum:
    "fgis-card-edit-row-two-columns:nth-child(1) > fgis-card-edit-row:nth-child(1) > div.card-edit-row__content > fgis-field-input > fgis-field-wrapper > div > div > input",
  typeSI:
    "fgis-card-edit-row-two-columns:nth-child(1) > fgis-card-edit-row:nth-child(2) > div.card-edit-row__content > fgis-field-input > fgis-field-wrapper > div > div > input",
  verifDate:
    "fgis-card-edit-row-two-columns:nth-child(2) > fgis-card-edit-row:nth-child(1) > div.card-edit-row__content > fgis-field-calendar > fgis-field-wrapper > div > div > fgis-calendar > div > div > input",
  validDate:
    "fgis-card-edit-row-two-columns:nth-child(2) > fgis-card-edit-row:nth-child(2) > div.card-edit-row__content > fgis-field-calendar > fgis-field-wrapper > div > div > fgis-calendar > div > div > input",
  conclusion: {
    first:
      "body > fgis-root > div > fgis-roei > fgis-verification-measuring-instruments-card-edit > div > div > div > div > fgis-verification-measuring-instruments-card-edit-common > fgis-card-block > div > div.card-block__container > div > fgis-card-edit-row:nth-child(3) > div.card-edit-row__content > fgis-field-selectbox > fgis-field-wrapper > div > div > fgis-selectbox > div > div > div.fgis-selectbox__single-placeholder.ng-star-inserted",
    second:
      "body > fgis-root > fgis-select-dropdown > div > div > div.fgis-selectbox__filter.ng-star-inserted > input",
    third:
      "body > fgis-root > fgis-select-dropdown > div > div > div.fgis-selectbox__options > fgis-virtual-list > div > div.virtual-list__view > div > fgis-virtual-list-item > li > div",
    forth: 'body > fgis-root > div > fgis-roei > fgis-verification-measuring-instruments-card-edit > div > div > div > div > fgis-verification-measuring-instruments-card-edit-common > fgis-card-block > div > div.card-block__container > div > fgis-card-edit-row:nth-child(3) > div.card-edit-row__content > fgis-field-selectbox > fgis-field-wrapper > div > div > fgis-selectbox > div > div > div.fgis-selectbox__single-value.ng-star-inserted',
  },
  verifSurname: {
    first:
      "body > fgis-root > div > fgis-roei > fgis-verification-measuring-instruments-card-edit > div > div > div > div > fgis-verification-measuring-instruments-card-edit-common > fgis-card-block > div > div.card-block__container > div > fgis-card-edit-row:nth-child(5) > div.card-edit-row__content > fgis-field-selectbox > fgis-field-wrapper > div > div > fgis-selectbox > div > div > div.fgis-selectbox__single-placeholder.ng-star-inserted",
    second:
      "body > fgis-root > fgis-select-dropdown > div > div > div.fgis-selectbox__filter.ng-star-inserted > input",
    third:
      "body > fgis-root > fgis-select-dropdown > div > div > div.fgis-selectbox__options > fgis-virtual-list > div > div.virtual-list__view > div > fgis-virtual-list-item > li > div",
    forth: 'body > fgis-root > div > fgis-roei > fgis-verification-measuring-instruments-card-edit > div > div > div > div > fgis-verification-measuring-instruments-card-edit-common > fgis-card-block > div > div.card-block__container > div > fgis-card-edit-row:nth-child(5) > div.card-edit-row__content > fgis-field-selectbox > fgis-field-wrapper > div > div > fgis-selectbox > div > div > div.fgis-selectbox__single-value.ng-star-inserted',
  },
};

const clickPlusBtn = (newPage) => {
  console.log("Ищу кнопку +");
  return new Promise(async (resolve, reject) => {
    const btn = await searcher(newPage, selectors.btnPlus)
    btn.click()
    resolve()
  });
};

const insertData = async (newPage, row) => {
  console.log("Вставляю данные");
  return new Promise(async (resolve, reject) => {
    const inputEvent = new Event("input");

    const arshNumInput = newPage.document.querySelector(selectors.arshNum);
    const typeSIInput = newPage.document.querySelector(selectors.typeSI);
    const verifDateInput = newPage.document.querySelector(selectors.verifDate);
    const validDateInput = newPage.document.querySelector(selectors.validDate);
    const conclusionDiv = newPage.document.querySelector(selectors.conclusion.first);
    const verifSurnameDiv = newPage.document.querySelector(selectors.verifSurname.first);

    arshNumInput.value = row.arshNum;
    arshNumInput.dispatchEvent(inputEvent);

    typeSIInput.value = row.typeSI;
    typeSIInput.dispatchEvent(inputEvent);

    verifDateInput.value = row.verifDate;
    verifDateInput.dispatchEvent(inputEvent);

    if (row.conclusion == "Пригодно") {
      validDateInput.value = row.validDate;
      validDateInput.dispatchEvent(inputEvent);
    }

    await insertConclusion(newPage, conclusionDiv, row)
    await insertVerifSurname(newPage, verifSurnameDiv, row)

    const a = open()
    setTimeout(() => {
      a.close()
    }, 100);

    newPage.document.querySelector(selectors.btnCheck).click();

    let msg = await searcher(newPage, selectors.success)
    msg = msg.innerText
    console.log(`([${row.arshNum}] [${row.typeSI}] [${row.conclusion}] [${row.verifSurname}]) => ${msg}`);
    await sleep(1000, 'Жду отправки данных')

    //await loading(newPage)

    resolve(msg === 'Черновик успешно сохранен')

  });
};


async function insertConclusion(newPage, conclusionDiv, row) {
  return new Promise(async (resolve, reject) => {
    conclusionDiv.click()
    const second = await searcher(newPage, selectors.conclusion.second)
    second.value = row.conclusion;
    second.dispatchEvent(new Event("input"));
    const waiter = new Promise(async (resolve, reject) => {
      for (let n = 0; n < 300; n++) {
        const third = await searcher(newPage, selectors.conclusion.third)
        if (third.innerText === row.conclusion) {
          third.click()
          resolve()
          break
        } else {
          await sleep(100, 'Ожидание подгрузки списка заключений')
        }
      }
      reject('Ошибка подгрузки списка заключений')
    })
    waiter.then(() => resolve())
  })
}

async function insertVerifSurname(newPage, verifSurnameDiv, row) {
  return new Promise(async (resolve, reject) => {
    verifSurnameDiv.click()
    const second = await searcher(newPage, selectors.verifSurname.second)
    second.value = row.verifSurname
    second.dispatchEvent(new Event("input"));
    const waiter = new Promise(async (resolve, reject) => {
      for (let n = 0; n < 300; n++) {
        const third = await searcher(newPage, selectors.verifSurname.third)
        if (third.innerText === row.verifSurname) {
          third.click()
          resolve()
          break
        } else {
          await sleep(100, 'Ожидание подгрузки списка фамилий поверителей')
        }
      }
      reject('Ошибка подгрузки списка фамилий поверителей')
    })
    waiter.then(() => resolve())
  })
}


//utils

function sleep(ms, msg) {
  //console.log(`sleep ${ms}ms ${msg}`);
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function searcher(page, selector) {
  return new Promise(async (resolve, reject) => {
    for (let n = 0; n < 600; n++) {
      const node = page.document.querySelector(selector);
      if (node) {
        resolve(node)
        break
      } else {
        await sleep(100, "Задержка поисковика")
      }
    }
    reject('Ошибка поиска: ' + selector)
  })
}

function loading(newPage) {
  return new Promise(async (resolve, reject) => {
    for (let n = 0; n < 3600; n++) {
      const loader = await searcher(newPage, 'body > fgis-root > fgis-waiter > div')
      if (loader.hidden) {
        resolve()
        break
      } else {
        await sleep(100, "Жду завершения загрузки страницы")
      }
    }
    reject("Ошибка ожидания загрузки страницы")
  })
}

function set100(newPage) { //Задает колво записей на странице 100шт
  return new Promise(async (resolve, reject) => {
    let one = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.container-fluid.container-paging > fgis-table-paging > div > div.paginations-wrapper.d-flex > div.show-records.d-flex.align-items-center.ng-star-inserted > div > div > a')
    one.click()
    let two = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.container-fluid.container-paging > fgis-table-paging > div > div.paginations-wrapper.d-flex > div.show-records.d-flex.align-items-center.ng-star-inserted > div > div > ul > li:nth-child(1) > a')
    two.click()
    resolve()
  })
}

function getRecCountPage(newPage) { //возвращает колво записей на странице
  return new Promise(async (resolve, reject) => {
    let count = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.container-fluid.container-paging > fgis-table-paging > div > div.paginations-wrapper.d-flex > div.show-records.d-flex.align-items-center.ng-star-inserted > div > span')
    resolve(+count.innerText)
  })
}

function showAllRecords(newPage) { //кликнуть на чекбокс показать всего записей
  return new Promise(async (resolve, reject) => {
    let el = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > fgis-roei-verification-measuring-instruments-advanced-search > fgis-filters-panel > fgis-left-panel > div.left-panel_body > div.body > label')
    el.click()
    resolve()
  })
}

function getPageCount(newPage) { //возвращает колво страниц
  return new Promise(async (resolve, reject) => {
    let count = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.container-fluid.container-paging > fgis-table-paging > div > div.paginations-wrapper.d-flex > div.show-pagination.d-flex.align-items-center.ng-star-inserted > span.ng-star-inserted')
    resolve(+count.innerText.split(' ')[1])
  })
}

function getCurPageNumber(newPage) { //возвращает номер текущей страницы
  return new Promise(async (resolve, reject) => {
    let el = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.container-fluid.container-paging > fgis-table-paging > div > div.paginations-wrapper.d-flex > div.show-pagination.d-flex.align-items-center.ng-star-inserted > div > ul > li')
    resolve(+el.innerText)
  })
}

function nextPage(newPage) {
  return new Promise(async (resolve, reject) => { //перелистывает страницу
    let el = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.container-fluid.container-paging > fgis-table-paging > div > div.paginations-wrapper.d-flex > div.show-pagination.d-flex.align-items-center.ng-star-inserted > div > span.paginations__page-toogle.paginations__page-toogle_right')
    el.click()
    resolve()
  })
}

function publish(newPage) { //нажимает кнопку опубликовать
  return new Promise(async (resolve, reject) => {
    let el = await searcher(newPage, 'body > fgis-root > div > fgis-roei > fgis-roei-verification-measuring-instruments > div > div > div.header-block > fgis-table-toolbar > section > div > div.left-side > div > fgis-toolbar > div > div:nth-child(4) > fgis-toolbar-button > button')
    el.click()
    resolve()
  })
}

function setAllDraftOnPage(newPage) { //Отмечает все черновики на странице
  let drafts = newPage.document.querySelectorAll('[title="Черновик"]')
  drafts.forEach(draft => {
    draft.parentNode.parentNode.parentNode.parentNode.childNodes[1].click()
  });
}

async function publishAll() {
  const userAnswer = confirm("Опубликовать все черновики?")
  if (!userAnswer) { return }

  const newPage = window
  await loading(newPage)


  await showAllRecords(newPage)
  await loading(newPage)

  const countRecOnPage = await getRecCountPage(newPage)
  if (countRecOnPage != 100) { set100(newPage) }

  const pageCount = await getPageCount(newPage)

  for (let i = 0; i < pageCount; i++) {
    setAllDraftOnPage(newPage)
    await sleep(100,'Отмечаю все черновики')
    //await publish(newPage)
    await loading(newPage)
    await nextPage(newPage)
    await loading(newPage)
  }
}

//---------------------------------------------------------------

function main(row) {
  return new Promise(async (resolve, reject) => {
    await clickPlusBtn(window);
    const success = await insertData(window, row);
    resolve(success)
  });
}

function retry(row) {
  return new Promise(async (resolve, reject) => {
    for (let n = 0; n < 20; n++) {
      console.log(`Попытка №${n + 1}`);
      const success = await main(row)
      if (success) {
        resolve()
        break
      }
    }
  })
}

async function go() {
  for (const row of data) {
    await retry(row);
  }
}

go()